{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../../../node_modules/vue-resize/dist/vue-resize.esm.js","../../../node_modules/vue-observe-visibility/dist/vue-observe-visibility.esm.js","../src/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../../../node_modules/mitt/dist/mitt.es.js","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","import { nextTick, pushScopeId, popScopeId, openBlock, createBlock, withScopeId } from 'vue';\n\nfunction getInternetExplorerVersion() {\n  var ua = window.navigator.userAgent;\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return -1;\n}\n\nlet isIE;\n\nfunction initCompat () {\n  if (!initCompat.init) {\n    initCompat.init = true;\n    isIE = getInternetExplorerVersion() !== -1;\n  }\n}\n\nvar script = {\n  name: 'ResizeObserver',\n\n  props: {\n    emitOnMount: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreWidth: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreHeight: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'notify',\n  ],\n\n  mounted () {\n    initCompat();\n    nextTick(() => {\n      this._w = this.$el.offsetWidth;\n      this._h = this.$el.offsetHeight;\n      if (this.emitOnMount) {\n        this.emitSize();\n      }\n    });\n    const object = document.createElement('object');\n    this._resizeObject = object;\n    object.setAttribute('aria-hidden', 'true');\n    object.setAttribute('tabindex', -1);\n    object.onload = this.addResizeHandlers;\n    object.type = 'text/html';\n    if (isIE) {\n      this.$el.appendChild(object);\n    }\n    object.data = 'about:blank';\n    if (!isIE) {\n      this.$el.appendChild(object);\n    }\n  },\n\n  beforeUnmount () {\n    this.removeResizeHandlers();\n  },\n\n  methods: {\n    compareAndNotify () {\n      if ((!this.ignoreWidth && this._w !== this.$el.offsetWidth) || (!this.ignoreHeight && this._h !== this.$el.offsetHeight)) {\n        this._w = this.$el.offsetWidth;\n        this._h = this.$el.offsetHeight;\n        this.emitSize();\n      }\n    },\n\n    emitSize () {\n      this.$emit('notify', {\n        width: this._w,\n        height: this._h,\n      });\n    },\n\n    addResizeHandlers () {\n      this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n      this.compareAndNotify();\n    },\n\n    removeResizeHandlers () {\n      if (this._resizeObject && this._resizeObject.onload) {\n        if (!isIE && this._resizeObject.contentDocument) {\n          this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n        }\n        this.$el.removeChild(this._resizeObject);\n        this._resizeObject.onload = null;\n        this._resizeObject = null;\n      }\n    },\n  },\n};\n\nconst _withId = /*#__PURE__*/withScopeId(\"data-v-b329ee4c\");\n\npushScopeId(\"data-v-b329ee4c\");\nconst _hoisted_1 = {\n  class: \"resize-observer\",\n  tabindex: \"-1\"\n};\npopScopeId();\n\nconst render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {\n  return (openBlock(), createBlock(\"div\", _hoisted_1))\n});\n\nscript.render = render;\nscript.__scopeId = \"data-v-b329ee4c\";\nscript.__file = \"src/components/ResizeObserver.vue\";\n\nfunction install(app) {\n  // eslint-disable-next-line vue/component-definition-name-casing\n  app.component('resize-observer', script);\n  app.component('ResizeObserver', script);\n}\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { script as ResizeObserver, install };\n//# sourceMappingURL=vue-resize.esm.js.map\n","import { nextTick } from 'vue';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction processOptions(value) {\n  var options;\n\n  if (typeof value === 'function') {\n    // Simple options (callback-only)\n    options = {\n      callback: value\n    };\n  } else {\n    // Options object\n    options = value;\n  }\n\n  return options;\n}\nfunction throttle(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout;\n  var lastState;\n  var currentArgs;\n\n  var throttled = function throttled(state) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    currentArgs = args;\n    if (timeout && state === lastState) return;\n    var leading = options.leading;\n\n    if (typeof leading === 'function') {\n      leading = leading(state, lastState);\n    }\n\n    if ((!timeout || state !== lastState) && leading) {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n    }\n\n    lastState = state;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n      timeout = 0;\n    }, delay);\n  };\n\n  throttled._clear = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return throttled;\n}\nfunction deepEqual(val1, val2) {\n  if (val1 === val2) return true;\n\n  if (_typeof(val1) === 'object') {\n    for (var key in val1) {\n      if (!deepEqual(val1[key], val2[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar VisibilityState = /*#__PURE__*/function () {\n  function VisibilityState(el, options, vnode) {\n    _classCallCheck(this, VisibilityState);\n\n    this.el = el;\n    this.observer = null;\n    this.frozen = false;\n    this.createObserver(options, vnode);\n  }\n\n  _createClass(VisibilityState, [{\n    key: \"createObserver\",\n    value: function createObserver(options, vnode) {\n      var _this = this;\n\n      if (this.observer) {\n        this.destroyObserver();\n      }\n\n      if (this.frozen) return;\n      this.options = processOptions(options);\n\n      this.callback = function (result, entry) {\n        _this.options.callback(result, entry);\n\n        if (result && _this.options.once) {\n          _this.frozen = true;\n\n          _this.destroyObserver();\n        }\n      }; // Throttle\n\n\n      if (this.callback && this.options.throttle) {\n        var _ref = this.options.throttleOptions || {},\n            _leading = _ref.leading;\n\n        this.callback = throttle(this.callback, this.options.throttle, {\n          leading: function leading(state) {\n            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;\n          }\n        });\n      }\n\n      this.oldResult = undefined;\n      this.observer = new IntersectionObserver(function (entries) {\n        var entry = entries[0];\n\n        if (entries.length > 1) {\n          var intersectingEntry = entries.find(function (e) {\n            return e.isIntersecting;\n          });\n\n          if (intersectingEntry) {\n            entry = intersectingEntry;\n          }\n        }\n\n        if (_this.callback) {\n          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.\n          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;\n          if (result === _this.oldResult) return;\n          _this.oldResult = result;\n\n          _this.callback(result, entry);\n        }\n      }, this.options.intersection); // Wait for the element to be in document\n\n      nextTick(function () {\n        if (_this.observer) {\n          _this.observer.observe(_this.el);\n        }\n      });\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      } // Cancel throttled call\n\n\n      if (this.callback && this.callback._clear) {\n        this.callback._clear();\n\n        this.callback = null;\n      }\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this.options.intersection && typeof this.options.intersection.threshold === 'number' ? this.options.intersection.threshold : 0;\n    }\n  }]);\n\n  return VisibilityState;\n}();\n\nfunction beforeMount(el, _ref2, vnode) {\n  var value = _ref2.value;\n  if (!value) return;\n\n  if (typeof IntersectionObserver === 'undefined') {\n    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');\n  } else {\n    var state = new VisibilityState(el, value, vnode);\n    el._vue_visibilityState = state;\n  }\n}\n\nfunction updated(el, _ref3, vnode) {\n  var value = _ref3.value,\n      oldValue = _ref3.oldValue;\n  if (deepEqual(value, oldValue)) return;\n  var state = el._vue_visibilityState;\n\n  if (!value) {\n    unmounted(el);\n    return;\n  }\n\n  if (state) {\n    state.createObserver(value, vnode);\n  } else {\n    beforeMount(el, {\n      value: value\n    }, vnode);\n  }\n}\n\nfunction unmounted(el) {\n  var state = el._vue_visibilityState;\n\n  if (state) {\n    state.destroyObserver();\n    delete el._vue_visibilityState;\n  }\n}\n\nvar ObserveVisibility = {\n  beforeMount: beforeMount,\n  updated: updated,\n  unmounted: unmounted\n};\n\nfunction install(app) {\n  app.directive('observe-visibility', ObserveVisibility);\n  /* -- Add more components here -- */\n}\n/* -- Plugin definition & Auto-install -- */\n\n/* You shouldn't have to modify the code below */\n// Plugin\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { ObserveVisibility, install };\n","// Fork of https://github.com/olahol/scrollparent.js to be able to build with Rollup\n\nconst regex = /(auto|scroll)/\n\nfunction parents (node, ps) {\n  if (node.parentNode === null) { return ps }\n\n  return parents(node.parentNode, ps.concat([node]))\n}\n\nconst style = function (node, prop) {\n  return getComputedStyle(node, null).getPropertyValue(prop)\n}\n\nconst overflow = function (node) {\n  return style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x')\n}\n\nconst scroll = function (node) {\n  return regex.test(overflow(node))\n}\n\nexport function getScrollParent (node) {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return\n  }\n\n  const ps = parents(node.parentNode, [])\n\n  for (let i = 0; i < ps.length; i += 1) {\n    if (scroll(ps[i])) {\n      return ps[i]\n    }\n  }\n\n  return document.scrollingElement || document.documentElement\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.index - viewB.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.index - viewB.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i&&i.push(e)||n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&i.splice(i.indexOf(e)>>>0,1)},emit:function(t,e){(n.get(t)||[]).slice().map(function(n){n(e)}),(n.get(\"*\")||[]).slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.es.js.map\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [\n    'resize',\n  ],\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$_events.on('vscroll:update', this.onVscrollUpdate)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$_events.off('vscroll:update', this.onVscrollUpdate)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.vscrollData.sizes[this.id] = size\n        this.vscrollData.validSizes[this.id] = true\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (app, prefix) {\n  app.component(`${prefix}recycle-scroller`, RecycleScroller)\n  app.component(`${prefix}RecycleScroller`, RecycleScroller)\n  app.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  app.component(`${prefix}DynamicScroller`, DynamicScroller)\n  app.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  app.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (app, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(app, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["itemsLimit","ua","window","userAgent","msie","parseInt","rv","edge","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","toString","call","slice","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","VisibilityState","el","options","vnode","instance","Constructor","_classCallCheck","this","observer","frozen","createObserver","protoProps","staticProps","value","_this","destroyObserver","callback","result","entry","once","throttle","_leading","throttleOptions","leading","delay","timeout","lastState","currentArgs","arguments","undefined","throttled","state","_len","args","_key","apply","concat","clearTimeout","setTimeout","_clear","oldResult","IntersectionObserver","entries","intersectingEntry","find","e","isIntersecting","intersectionRatio","threshold","intersection","nextTick","observe","disconnect","get","beforeMount","_ref2","console","warn","_vue_visibilityState","unmounted","ObserveVisibility","updated","_ref3","deepEqual","val1","val2","oldValue","regex","style","node","prop","getComputedStyle","getPropertyValue","scroll","overflow","getScrollParent","HTMLElement","SVGElement","ps","parents","parentNode","document","scrollingElement","documentElement","items","type","required","keyField","String","default","direction","validator","includes","simpleArray","supportsPassive","opts","addEventListener","uid","components","ResizeObserver","directives","itemSize","Number","minItemSize","sizeField","typeField","buffer","pageMode","Boolean","prerender","emitUpdate","emits","data","pool","totalSize","ready","hoverKey","computed","[object Object]","sizes","-1","accumulator","field","current","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","deep","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","$nextTick","removeListeners","methods","index","item","nr","markRaw","id","used","view","shallowReactive","position","push","fake","unusedViews","unusedPool","set","delete","$emit","event","requestAnimationFrame","continuous","$_refreshTimout","handleScroll","isVisible","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","startIndex","endIndex","getScroll","positionDiff","start","end","h","oldI","a","b","Math","ceil","config","itemsLimitError","$_continuous","clear","unuseView","findIndex","unusedIndex","v","Error","pop","addView","$_sortTimer","sortViews","$el","body","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","getListenerTarget","passive","handleResize","removeEventListener","scrollToPosition","log","sort","viewA","viewB","class","_createBlock","$options","_ctx","_hoisted_1","_renderSlot","_createVNode","ref","$data","onMouseenter","onMouseleave","active","_hoisted_2","onNotify","RecycleScroller","$_resizeObserver","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","inheritAttrs","validSizes","$_undefinedMap","forceUpdate","immediate","all","$_updates","$_undefinedSizes","$_events","on","handler","handlers","off","splice","indexOf","emit","evt","map","$refs","scroller","force","scrollToItem","$_scrollingToBottom","scrollHeight","cb","_mergeProps","min-item-size","$props","key-field","onResize","onVisible","itemWithSize","before","after","inject","watchData","sizeDependencies","emitResize","tag","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","onVscrollUpdate","finalActive","$_pendingSizeUpdate","computeSize","$_watchData","offsetWidth","offsetHeight","applySize","round","unobserve","$slots","plugin","version","VERSION","install","app","finalOptions","assign","installComponents","componentsPrefix","prefix","component","DynamicScroller","DynamicScrollerItem","registerComponents","idProp","vm","store","reactive","idState","created","$_id","$_getId","_this2","$_updateIdState","beforeUpdate","$_idStateInit","factory"],"mappings":"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"}