{"version":3,"file":"vue-virtual-scroller.esm.js","sources":["../src/config.js","../src/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/mixins/IdState.js","../src/index.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","// Fork of https://github.com/olahol/scrollparent.js to be able to build with Rollup\n\nconst regex = /(auto|scroll)/\n\nfunction parents (node, ps) {\n  if (node.parentNode === null) { return ps }\n\n  return parents(node.parentNode, ps.concat([node]))\n}\n\nconst style = function (node, prop) {\n  return getComputedStyle(node, null).getPropertyValue(prop)\n}\n\nconst overflow = function (node) {\n  return style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x')\n}\n\nconst scroll = function (node) {\n  return regex.test(overflow(node))\n}\n\nexport function getScrollParent (node) {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return\n  }\n\n  const ps = parents(node.parentNode, [])\n\n  for (let i = 0; i < ps.length; i += 1) {\n    if (scroll(ps[i])) {\n      return ps[i]\n    }\n  }\n\n  return document.scrollingElement || document.documentElement\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.index - viewB.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.index - viewB.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [\n    'resize',\n  ],\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$_events.on('vscroll:update', this.onVscrollUpdate)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$_events.off('vscroll:update', this.onVscrollUpdate)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.vscrollData.sizes[this.id] = size\n        this.vscrollData.validSizes[this.id] = true\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (app, prefix) {\n  app.component(`${prefix}recycle-scroller`, RecycleScroller)\n  app.component(`${prefix}RecycleScroller`, RecycleScroller)\n  app.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  app.component(`${prefix}DynamicScroller`, DynamicScroller)\n  app.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  app.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (app, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(app, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n"],"names":["itemsLimit","regex","parents","node","ps","parentNode","concat","style","prop","getComputedStyle","getPropertyValue","overflow","scroll","test","getScrollParent","HTMLElement","SVGElement","i","length","document","scrollingElement","documentElement","props","items","type","Array","required","keyField","String","default","direction","validator","value","includes","simpleArray","supportsPassive","window","opts","Object","defineProperty","get","addEventListener","e","ResizeObserver","_createBlock","_renderSlot","_createVNode","RecycleScroller","_mergeProps","idProp","vm","item","id","store","reactive","data","idState","created","$_id","$_getId","call","$watch","handler","$nextTick","immediate","$_updateIdState","beforeUpdate","methods","$_idStateInit","factory","$options","Error","console","warn","registerComponents","app","prefix","component","DynamicScroller","DynamicScrollerItem","plugin","version","VERSION","install","options","finalOptions","assign","installComponents","componentsPrefix","key","config"],"mappings":"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"}